{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iqles\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\rock star\\\\berlin_test\\\\src\\\\pages\\\\VideoPage.js\",\n    _s = $RefreshSig$();\n\nimport { useParams } from \"react-router-dom\";\nimport { useContext, useCallback, useEffect, useState } from \"react\";\nimport AuthContext from \"../store/auth-context\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst VideoPage = () => {\n  _s();\n\n  const params = useParams();\n  const {\n    idVideo,\n    idCategory\n  } = params;\n  const [videos, setVideos] = useState([]);\n  const [isFetched, setIsFetched] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://blindside-test-default-rtdb.firebaseio.com/videos.json\");\n\n      if (!response.ok) {\n        throw new Error(\"sth wrong\");\n      }\n\n      const data = await response.json();\n      setVideos(data);\n      authCtx.videosList(data);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsFetched(true);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  const authCtx = useContext(AuthContext);\n  let renderen = [];\n\n  if (isFetched) {\n    let catVideos = [];\n    const propertysValues = Object.values(authCtx.videos);\n    catVideos.push(...propertysValues);\n    let relevantVideo = catVideos.filter(f => f.category === idCategory && f.link !== idVideo);\n    renderen = relevantVideo.map(m => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/videos/${m.category}/${m.link}`,\n        children: m.link\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 63\n      }, this)\n    }, Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 39\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: idVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Relative videos for \", idCategory, \" category\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: renderen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(VideoPage, \"IioEyY0S19Dc5Ta0f0s1m9lKOv8=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/iqles/OneDrive/Рабочий стол/rock star/berlin_test/src/pages/VideoPage.js"],"names":["useParams","useContext","useCallback","useEffect","useState","AuthContext","Link","VideoPage","params","idVideo","idCategory","videos","setVideos","isFetched","setIsFetched","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","authCtx","videosList","message","renderen","catVideos","propertysValues","Object","values","push","relevantVideo","filter","f","category","link","map","m","Math","random"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,UAAT,EAAoBC,WAApB,EAAgCC,SAAhC,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;;;;AAEA,MAAMC,SAAS,GAAC,MAAI;AAAA;;AAChB,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAM;AAAES,IAAAA,OAAF;AAAUC,IAAAA;AAAV,MAAyBF,MAA/B;AAEA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMa,kBAAkB,GAAGf,WAAW,CAAC,YAAY;AAC/Cc,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAA5B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAX,MAAAA,SAAS,CAACU,IAAD,CAAT;AACAE,MAAAA,OAAO,CAACC,UAAR,CAAmBH,IAAnB;AACD,KARD,CAQE,OAAOP,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACW,OAAP,CAAR;AACD;;AACDZ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAdmC,EAcjC,EAdiC,CAAtC;AAgBEX,EAAAA,SAAS,CAAC,MAAI;AACZc,IAAAA,kBAAkB;AAAG,GADd,EACe,CAACA,kBAAD,CADf,CAAT;AAGE,QAAMO,OAAO,GAACvB,UAAU,CAACI,WAAD,CAAxB;AACA,MAAIsB,QAAQ,GAAC,EAAb;;AACA,MAAGd,SAAH,EAAa;AACjB,QAAIe,SAAS,GAAC,EAAd;AACA,UAAMC,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAcP,OAAO,CAACb,MAAtB,CAAxB;AACGiB,IAAAA,SAAS,CAACI,IAAV,CAAe,GAAGH,eAAlB;AACH,QAAII,aAAa,GAAEL,SAAS,CAACM,MAAV,CAAkBC,CAAD,IAAMA,CAAC,CAACC,QAAH,KAAe1B,UAAf,IAA8ByB,CAAC,CAACE,IAAH,KAAW5B,OAA9D,CAAnB;AACAkB,IAAAA,QAAQ,GAAGM,aAAa,CAACK,GAAd,CAAmBC,CAAD,iBAAK;AAAA,6BAAwB,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,WAAUA,CAAC,CAACH,QAAS,IAAGG,CAAC,CAACF,IAAK,EAA1C;AAAA,kBAA8CE,CAAC,CAACF;AAAhD;AAAA;AAAA;AAAA;AAAA;AAAxB,OAASG,IAAI,CAACC,MAAL,EAAT;AAAA;AAAA;AAAA;AAAA,YAAvB,CAAX;AACH;;AACG,sBACI;AAAA,4BACA;AAAA,gBAAKhC;AAAL;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,yCAAyBC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAA,gBAAKiB;AAAL;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA,kBADJ;AAOH,CA3CD;;GAAMpB,S;UACaP,S;;;KADbO,S;AA6CN,eAAeA,SAAf","sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport { useContext,useCallback,useEffect,useState } from \"react\";\r\nimport AuthContext from \"../store/auth-context\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst VideoPage=()=>{\r\n    const params = useParams()\r\n    const { idVideo,idCategory } = params;\r\n\r\n    const [videos, setVideos] = useState([]);\r\n    const [isFetched, setIsFetched] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchMoviesHandler = useCallback(async () => {\r\n        setError(null);\r\n        try {\r\n          const response = await fetch(\"https://blindside-test-default-rtdb.firebaseio.com/videos.json\");\r\n          if (!response.ok) {\r\n            throw new Error(\"sth wrong\");\r\n          }\r\n          const data = await response.json();\r\n          setVideos(data);\r\n          authCtx.videosList(data)\r\n        } catch (error) {\r\n          setError(error.message);\r\n        }\r\n        setIsFetched(true);\r\n      }, []);\r\n    \r\n      useEffect(()=>{\r\n        fetchMoviesHandler()},[fetchMoviesHandler])\r\n\r\n        const authCtx=useContext(AuthContext)\r\n        let renderen=[]\r\n        if(isFetched){\r\n    let catVideos=[];\r\n    const propertysValues = Object.values(authCtx.videos);\r\n       catVideos.push(...propertysValues)\r\n    let relevantVideo= catVideos.filter((f)=>(f.category)===idCategory && (f.link)!==idVideo);\r\n    renderen = relevantVideo.map((m)=><li key={Math.random()}><Link to={`/videos/${m.category}/${m.link}`}>{m.link}</Link></li>)\r\n}\r\n    return(\r\n        <>\r\n        <h1>{idVideo}</h1>\r\n        <h2>Relative videos for {idCategory} category</h2>\r\n        <h4>{renderen}</h4>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default VideoPage;"]},"metadata":{},"sourceType":"module"}