{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iqles\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\rock star\\\\berlin_test\\\\src\\\\pages\\\\VideoPage.js\",\n    _s = $RefreshSig$();\n\nimport { useParams } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport AuthContext from \"../store/auth-context\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst VideoPage = () => {\n  _s();\n\n  const params = useParams();\n  const {\n    idVideo,\n    idCategory\n  } = params;\n  const fetchMoviesHandler = useCallback(async () => {\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://blindside-test-default-rtdb.firebaseio.com/videos.json\");\n\n      if (!response.ok) {\n        throw new Error(\"sth wrong\");\n      }\n\n      const data = await response.json();\n      setVideos(data);\n      authCtx.videosList(data);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsFetched(true);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  const authCtx = useContext(AuthContext);\n  let catVideos = [];\n  const propertysValues = Object.values(authCtx.videos);\n  catVideos.push(...propertysValues);\n  let relevantVideo = catVideos.filter(f => f.category === idCategory && f.link !== idVideo);\n  let renderen = relevantVideo.map(m => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      to: `/videos/${m.category}/${m.link}`,\n      children: m.link\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 67\n    }, this)\n  }, Math.random(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 43\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: idVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Relative videos for \", idCategory, \" category\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: renderen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(VideoPage, \"tqYoZXQtoAmCkBxeLLdZMPTwDWc=\", false, function () {\n  return [useParams];\n});\n\n_c = VideoPage;\nexport default VideoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPage\");","map":{"version":3,"sources":["C:/Users/iqles/OneDrive/Рабочий стол/rock star/berlin_test/src/pages/VideoPage.js"],"names":["useParams","useContext","AuthContext","Link","VideoPage","params","idVideo","idCategory","fetchMoviesHandler","useCallback","setError","response","fetch","ok","Error","data","json","setVideos","authCtx","videosList","error","message","setIsFetched","useEffect","catVideos","propertysValues","Object","values","videos","push","relevantVideo","filter","f","category","link","renderen","map","m","Math","random"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;;;;AAEA,MAAMC,SAAS,GAAC,MAAI;AAAA;;AAChB,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAM;AAAEM,IAAAA,OAAF;AAAUC,IAAAA;AAAV,MAAyBF,MAA/B;AAEA,QAAMG,kBAAkB,GAAGC,WAAW,CAAC,YAAY;AAC/CC,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAA5B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAC,MAAAA,SAAS,CAACF,IAAD,CAAT;AACAG,MAAAA,OAAO,CAACC,UAAR,CAAmBJ,IAAnB;AACD,KARD,CAQE,OAAOK,KAAP,EAAc;AACdV,MAAAA,QAAQ,CAACU,KAAK,CAACC,OAAP,CAAR;AACD;;AACDC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAdmC,EAcjC,EAdiC,CAAtC;AAgBEC,EAAAA,SAAS,CAAC,MAAI;AACZf,IAAAA,kBAAkB;AAAG,GADd,EACe,CAACA,kBAAD,CADf,CAAT;AAGF,QAAMU,OAAO,GAACjB,UAAU,CAACC,WAAD,CAAxB;AACA,MAAIsB,SAAS,GAAC,EAAd;AACA,QAAMC,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAcT,OAAO,CAACU,MAAtB,CAAxB;AACGJ,EAAAA,SAAS,CAACK,IAAV,CAAe,GAAGJ,eAAlB;AACH,MAAIK,aAAa,GAAEN,SAAS,CAACO,MAAV,CAAkBC,CAAD,IAAMA,CAAC,CAACC,QAAH,KAAe1B,UAAf,IAA8ByB,CAAC,CAACE,IAAH,KAAW5B,OAA9D,CAAnB;AACA,MAAI6B,QAAQ,GAAGL,aAAa,CAACM,GAAd,CAAmBC,CAAD,iBAAK;AAAA,2BAAwB,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,WAAUA,CAAC,CAACJ,QAAS,IAAGI,CAAC,CAACH,IAAK,EAA1C;AAAA,gBAA8CG,CAAC,CAACH;AAAhD;AAAA;AAAA;AAAA;AAAA;AAAxB,KAASI,IAAI,CAACC,MAAL,EAAT;AAAA;AAAA;AAAA;AAAA,UAAvB,CAAf;AACA,sBACI;AAAA,4BACA;AAAA,gBAAKjC;AAAL;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,yCAAyBC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAA,gBAAK4B;AAAL;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA,kBADJ;AAOH,CApCD;;GAAM/B,S;UACaJ,S;;;KADbI,S;AAsCN,eAAeA,SAAf","sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport { useContext } from \"react\";\r\nimport AuthContext from \"../store/auth-context\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst VideoPage=()=>{\r\n    const params = useParams()\r\n    const { idVideo,idCategory } = params;\r\n\r\n    const fetchMoviesHandler = useCallback(async () => {\r\n        setError(null);\r\n        try {\r\n          const response = await fetch(\"https://blindside-test-default-rtdb.firebaseio.com/videos.json\");\r\n          if (!response.ok) {\r\n            throw new Error(\"sth wrong\");\r\n          }\r\n          const data = await response.json();\r\n          setVideos(data);\r\n          authCtx.videosList(data)\r\n        } catch (error) {\r\n          setError(error.message);\r\n        }\r\n        setIsFetched(true);\r\n      }, []);\r\n    \r\n      useEffect(()=>{\r\n        fetchMoviesHandler()},[fetchMoviesHandler])\r\n\r\n    const authCtx=useContext(AuthContext)\r\n    let catVideos=[];\r\n    const propertysValues = Object.values(authCtx.videos);\r\n       catVideos.push(...propertysValues)\r\n    let relevantVideo= catVideos.filter((f)=>(f.category)===idCategory && (f.link)!==idVideo);\r\n    let renderen = relevantVideo.map((m)=><li key={Math.random()}><Link to={`/videos/${m.category}/${m.link}`}>{m.link}</Link></li>)\r\n    return(\r\n        <>\r\n        <h1>{idVideo}</h1>\r\n        <h2>Relative videos for {idCategory} category</h2>\r\n        <h4>{renderen}</h4>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default VideoPage;"]},"metadata":{},"sourceType":"module"}